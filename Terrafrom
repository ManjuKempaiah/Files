terraform init
terraform plan
terraform apply -auto-approve
terraform destroy -auto-approve
terraform state list

terraform fmt --- Formats the Code -- To Check the alignment of the code
terraform validate -- Validates the Code -- To Check the Syntax of the code

terraform apply -auto-approve -var region = eu-north-1
terraform apply -auto-approve -var -file=dev.tfvars

.terraform
.terraform.lock.hcl

terraform.tfstate

terraform apply -auto-approve --target=resource_type.logical_name
terraform apply -auto-approve --target=aws_subnet.main

terraform destroy -auto-approve --target=resource_type.logical_name
terraform destroy -auto-approve --target=aws_subnet.main

terraform taint resource_type.logical_name
terraform apply -auto-approve

terraform import resource_type.logical_name resource_id


terraform workspace new workspace_name
terraform workspace select workspace_name
terraform workspace delete workspace_name
terraform workspace show
terraform workspace list

terraform state pull

The terraform state pull command is used to download the current state file from the remote backend (such as an S3 bucket) and display it in your terminal

terraform state pull > backup.tfstate

This command saves the state file as backup.tfstate in your local directory.

-------------------------------------------------------------------------------

The terraform state push command is used to manually upload a Terraform state file to a remote backend, replacing the current state file stored there

terraform state push <path_to_state_file>

terraform state push backup.tfstate

----------------------------------------------------------------------------------
	
provider "aws" {
  region = "eu-north-1"
}

terraform {
  backend "s3" {
    bucket         = "roopa-terraform-bucket"
    region         = "eu-north-1"
    key            = "terraform.tfstate"
    dynamodb_table = "tf-statelock"
  }
}

-------------------------------------------------------------------

resource "aws_vpc" "main" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "manju-vpc"
  }
}

-----------------------------------------------------------------

resource "aws_subnet" "main" {
  vpc_id           = aws_vpc.main.id
  cidr_block       = "10.0.0.0/24"
  availabilty_zone = "eu-north-1a"

  tags = {
    Name = "manju-subnet"
  }
}

-------------------------------------------------------------------

resource "aws_instance" "main" {
  ami                         = "ami-0dcc1e21636832c5d"
  instance_type               = "m5.large"
  subnet_id                   = "10.0.0.0/24"
  availability_zone           = "eu-north-1a"
  key_name                    = aws_key_pair.main.key_name
  associate_public_ip_address = true
  vpc_security_group_ids      = [aws_security_group.main.id]


 tags = {
    Name = "manju-instance"
  }
}

-------------------------------------------------------------------

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "manju-internet_gateway"
  }
}

--------------------------------------------------------------------

resource "aws_route_table" "main" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name = "manju-internet_gateway"
  }
}	

-----------------------------------------------------------------------


resource "aws_route_table_association" "main" {
  subnet_id      = aws_subnet.main.id
  route_table_id = aws_route_table.main.id
}

--------------------------------------------------------------------------
