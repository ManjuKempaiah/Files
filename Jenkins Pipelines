Pipeline Block: Encloses the entire Jenkins Pipeline script.
agent any: Execute pipeline on any any available agent in Jenkins environment.
stages: Defines the stages of the Pipeline.
stage('Install Docker'): Defines a stage named "Install Docker".
steps: Contains the steps to be executed within this stage.
script: Allows running shell scripts within the Pipeline. 

--------------------------------------------------------

   -o StrictHostKeyChecking=no ****
   prevents SSH from prompting and automatically accepts the host key.

------------------------------------------------------------   

sh step is used to execute shell commands on the agent 
(typically a Linux machine) where the pipeline is running.

ssh is used in a Jenkins pipeline to securely 
connect to remote servers and run commands

--------------------------------------------------------

Docker Dev Deploy

pipeline{
	agent any
	stages{
	stage('Checkout The Code'){
	steps{
	git branch:'main', credentialsId:'git-ManjuKempaiah', url:'https://github.com/ManjuKempaiah/python-app'
	}
	}
	stage('Maven Build'){
	steps{
	sh 'mvn clean package'
	}
	}
	stage('SonarQube Analysis'){
	steps{
	withSonarQubeEnv('sonar10'){
	sh 'mvn sonar:sonar'
	}
	}
	}
	stage('SonarQube Analysis Status'){
	steps{
	script{
	def qg = waitForQualityGate()
	if (qg.status != 'OK'){
	error "Sonar Analysis Failed"
	}
	}
	}
	}
	stage('Docker Build'){
	steps{
	sh 'docker build -t manjukempaiah/pythonapp:0.0.1 .'
	}
	}
	stage('Docker Push'){
	steps{
	withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'pwd', usernameVariable: 'user')]) {
	sh "docker login -u ${user} -p ${pwd}"
	sh "docker push manjukempaiah/pythonapp:0.0.1"
	}
	}
	}
	stage('Docker Dev Deploy'){
	steps{
	sshagent(['docker-ssh']){
	sh "ssh -o StrictHostKeyChecking=no ec2-user@192.168.1.100 docker rm -f pythonapp"
	sh "ssh ec2-user@192.168.1.100 docker run -d -p 8080:5000 --name pythonapp manjukempaiah/pythonapp:0.0.1"
	}
	}
	}
	}
}

--------------------------------------------------------
Copy War File To Tomcat Server
pipeline{
    agent any
    stages{
        stage("Git Checkout"){
            steps{
                git branch:'main',credentialsId:'git-ManjuKempaiah',url:'https://github.com/ManjuKempaiah/chattakkar'
            }
        }
        stage("Maven Build"){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("Tomact Delpoy"){
            steps{
                //install sshagent
                sshagent(['tomcat-dev']){
                    // copy warfile to tomcat-dev
                    sh "scp target/chattakkar.war ec2-user@172.31.47.249:/opt/tomcat9/webapps"
                    // restart tomcat
                    sh "ssh ec2-user@172.31.47.249 /opt/tomcat9/bin/shutdown.sh"
                    sh "ssh ec2-user@172.31.47.249 /opt/tomcat9/bin/startup.sh"
                }
            }
        }
    }
}

--------------------------------------------------------

Pipeline To Install Nginx

pipeline{
	agent any
	stages{
	stage('Install Nginx'){
	steps{
	script{
	// Update Package Repository
	sh 'sudo yum update -y'
	// Install Nginx
	sh 'sudo yum install nginx -y'
	// Start Nginx Service
	sh 'sudo systemctl start nginx'
	// Enable Nginx Service
	sh 'sudo systemctl enable nginx'
	}
	}
	}
	}
	post{
	sucess{
	echo "Nginx has been sucessfully installed"
	}
	failure{
	echo "Failed to install nginx"
	}
	}
}

--------------------------------------------------------

Pipeline To Install Node.js

pipeline{
	agent any
	environment{
	NODE_VERSION = '20.x'
	}
	stages{
	stage('Install Node.js'){
	steps{
	script{
	// Install node.js using node source repository
	sh 'curl -fsSL https://rpm.nodesource.com/setup_${NODE_VERSION} | sudo bash -'
	// Install Node.js
	sh 'sudo yum install node.js -y'
	}
	}
	}
	}
	post{
	sucess{
	echo "Node.js has been sucessfully installed"
	}
	failure{
	echo "Failed to install nodejs"
	}
	}
}

--------------------------------------------------------

Pipeline To Install Docker

pipeline{
	agent any
	stages{
	stage('Install Docker'){
	steps{
	script{
	// Install docker
	sh 'sudo yum install docker -y'
	// Start docker
	sh 'sudo systemctl start docker'
	// Grant ec2-user permissions on docker
	sh 'usermod -a -G docker ec2-user'
	}
	}
	}
	}
}

--------------------------------------------------------

Pipeline To Install Ansible

pipeline{
	agent any
	stages{
	stage('Install Ansible'){
	steps{
	script{
	// Install EPEL repository          EPEL is needed to access the Ansible package on Amazon Linux
	sh 'sudo yum install epel-release'  Extra Packages for Enterprise Linux 
	// Install Ansible
	sh 'sudo yum instll ansible -y'
	}
	}
	}
	}
}

--------------------------------------------------------

Parallel Satges or Parallel Blocks

pipeline{
	agent any
	stages{
	stage('Task1 and Task2'){
	parallel{
	stage('Task1'){
	steps{
	echo"Task1...."
	}
	}
	stage('Task2'){
	steps{
	echo"Task2...."
	}
	}
	}
	}
	}
}

--------------------------------------------------------

Agent Block

pipeline{
	agnet none
	stages{
	stage('Build on Agent1'){
	agent{
	label'agent1'
	}
	steps{
	// Build steps for Agent1
	}
	}
	stage('Build on Agent2'){
	agent{
	label'agent2'
	}
	steps{
	// Build steps for Agent2
	}
	}
	}
}

--------------------------------------------------------

Node Block

pipeline{
	agent none
	stages{
	stage('Build on Agent1'){
	steps{
	node('agent1'){
	// Build steps for Agent1
	}
	}
	}
	stage('Build on Agent2'){
	steps{
	node('agent2'){
	// Build steps for Agent2
	}
	}
	}
	}
}

--------------------------------------------------------

Trigger The Job

 pipeline{
 agent any
 stages{
 stage('Hello World'){
 steps{
 echo 'ManjuKempaiah'
 }
 }
 stage('Trigger The Job'){
 steps{
 build('Jobname')
 }
 }
 }
 }

 build job: 'JobName'
 build('JobName')
 build'JobName'


--------------------------------------------------------

SonarQube Analysis With Parallel Stages

pipeline{
	agent any
	environment{
	GIT_BRANCH = "main"
	GIT_CREDS  = "git-ManjuKempaiah"
	GIT_URL    = "https://github.com/ManjuKempaiah/chatbot"
	}
	stages{
	stage('Checkout The Code'){
	steps{
	git branch: GIT_BRANCH, credentialsId: GIT_CREDS, url: GIT_URL
	}
	}
	stage('Maven Build'){
	steps{
	sh 'mvn clean package'
	}
	}
	stage('SoanrQube Analysis'){
	steps{
	withSonarQubeEnv('sonar10'){
	sh 'mvn sonar:sonar'
	}
	}
	}
	stage('SonarQube Status'){
	steps{
	script{
        def qg = waitForQualityGate()
	if (qg.status != 'OK'){
	error "Sonar Analysis Failed"
        }
	}
	}
	}
	}
}

--------------------------------------------------------

SonarQube Analysis

pipeline{
	agent any
	environment{
	GIT_BRANCH = "main"
	GIT_CREDS = "git-ManjuKempaiah"
	GIT_URL = "https://github.com/ManjuKempaiah/chatbot"
	}
	stages{
	stage('Checkout The Code'){
	steps{
	git branch: GIT_BRANCH, credentialsId: GIT_CREDS, url: GIT_URL
	}
	}
	stage('Maven Build'){
	steps{
	sh 'mvn clean package'
	}
	}
	stage('SonarQube Analysis'){
	steps{
	withSonarQubeEnv('sonar10'){
	sh 'mvn sonar:sonar'
	}
	}
	}
	stage('SonarQube Analysis Status'){
	steps{
	script{
	def qg = waitForQualityGate()
	if (qg.status != 'OK'){
	error "Sonar Analysis Failed"
	}
	}
	}
	}
	}
}

--------------------------------------------------------

Upstream

pipeline {
    agent any
    triggers {
      upstream 'ai-app-ci-cd'
    }

    stages {
        stage('Selenium Testing') {
            steps {
                echo 'Hello Selenium testing'
            }
        }
    }
}

--------------------------------------------------------

Here's a simple shell script to print "Hello, World!" to the terminal

#!/bin/bash

# Shell script to print Hello, World!
echo "Hello, World!"

---------------------------------------------------------

The shebang line in a shell script is a special character sequence (#!) followed by the path to the interpreter that should execute the script. It is used to specify which interpreter should be used to parse and execute the script. This line must appear as the very first line in the script file.

--------------------------------------------------------
Shebang line:

 Path to the interpreter that should execute the script.

-y: Automatically answers "yes" to any prompts during the installation.
-f: Forces the pruning action without prompting for confirmation.
The -i option in the ssh command stands for identity file.

--------------------------------------------------------
Core API Group (v1)
Extended API Group (apps/v1)

v1: Used for core, stable, and essential resources like Pods, Services, ConfigMaps, etc., which are part of Kubernetes' fundamental operations.

apps/v1: Used for more complex, application-related resources like Deployments, StatefulSets, and DaemonSets, which are managed separately to allow for greater flexibility and evolution.

--------------------------------------------------------

Recursively

-r: Primarily used in commands like rm and cp for recursive operations, and it usually has the same meaning as -R.
-R: Also used for recursive operations but is more commonly used in commands like chmod and chown for recursively changing permissions or ownership.

--------------------------------------------------------

Environmental Variable in Jenkins are key-value pairs used to pass information to jobs,pipelines,scripts during the build process

--------------------------------------------------------

We have developments branch for dev activities, test branch for test activities, release branch for doing particular release and feature branches for adding new features to the system.


We use one VPC for one environment. Development has a separate one. Testing has a separate one. UAT has a separate one. stage has a separate one Production has a separate one. We are segregating them with TerraForm workspaces.

--------------------------------------------------------

Path to the interpreter that should execute the script.

--------------------------------------------------------

Environmental Variable in Jenkins are key-value pairs used to pass 
information to jobs,pipelines,scripts during the build process.

--------------------------------------------------------

A hypervisor is software that creates and manages virtual 
machines by allocating hardware resources to them.

--------------------------------------------------------

Control Node is the server where the ansible is installed.

--------------------------------------------------------

Manging Node is the server that is configured using ansible.

--------------------------------------------------------

Virtualization is the process of creating virtual versions of 
computing resources, such as servers, storage, or networks.

--------------------------------------------------------

   -o StrictHostKeyChecking=no ****
   prevents SSH from prompting and automatically accepts the host key.

------------------------------------------------------------   

sh step is used to execute shell commands on the agent 
(typically a Linux machine) where the pipeline is running.

------------------------------------------------------------ 

what would you do if your Jenkins build is stuck in the queue?

If your Jenkins build is stuck in the queue:

Check if any agents are available – the build may be waiting for an executor.

Make sure the agent with the right label is online – the job might be assigned to a specific label.

Look for other running builds – your job could be waiting for a lock or resource.

Restart the agent or Jenkins – if things seem frozen or unresponsive.

------------------------------------------------------------ 

how would you setup a CI/CD for a microservice-based application?

1. Put each microservice in a Git repo (or all in one repo if preferred).

2. Use Docker to containerize each microservice.

3. Set up CI using Jenkins

4. Set up CD using ArgoCD

5. Use Grafana and Promotheous for metrics

6. Use Elasticsearch, Kibana for logging

------------------------------------------------------------ 

How would you build artifacts once and reuse them across environments?

                          or

How would you promote builds between Dev, QA and Prod?

1. Build the artifact once in the Dev environment (e.g., a Docker image or .jar file).

2. Store it in a central place like Docker Hub, AWS ECR, or Artifactory.

3. Use the same artifact in QA and Prod by pulling it from the registry—don’t rebuild it.

4. Use tags to mark the artifact (e.g., my-app:1.0.0, my-app:qa, my-app:prod).

5. Automate this with a CI/CD pipeline and use manual approval before deploying to Prod.

------------------------------------------------------------

Suppose a deployment fails in production - how will you diagnose the issue?

1. Check deployment logs from the CI/CD pipeline for errors.

2. Look at application logs (e.g., server or container logs) to see what went wrong.

3. Monitor system metrics (CPU, memory, response times, error rates).

4. Check recent changes: code, config, environment variables, or secrets.

5. Reproduce the issue in staging if possible.

6. Rollback the deployment if the issue is critical.

------------------------------------------------------------
