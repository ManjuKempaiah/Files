FROM        -- Specifies the base image for the docker image
WORKDIR     -- Sets the Working Directory inside the docker image
RUN         -- RUN is the docker build time instruction
CMD         -- CMD is the docker run time instruction
COPY        -- COPY copies files and folders from host machine to image
ADD         -- ADD copies file and folders from host machine to image
               ADD have an extra capability, It Downloads the file from URL
               And also it auto extract the compressed file
EXPOSE      -- Exposes port to the host machine
CMD         -- CMD can be Overridden at run time
ENTRYPOINT  -- ENTRYPOINT cannot be overridden at run, it is getting appended
               CMD and ENTRYPOINT cab be used together
ARG         -- ARG is the docker build time Argument
ENV         -- ENV is the docker run time Argument
LABEL       -- To add Metadata
USER        -- To run application using specific user
HEALTHCHECKS-- To check the health of the application
. Indicates -- Current Directory as build context
-d          -- Detached Mode(in the background)
-it         -- Interactive Terminal(in the foreground)
-itd        -- Interactive Terminal Detached Mode
 

-----------------------------------------------------------------------------------------

FROM nginx:latest
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

FROM openjdk:11-jre-slim
WORKDIR /app
COPY app.jar .
EXPSOE 8080
CMD ["java", "-jar", "app.jar"]

FROM alpine:3.18.2
RUN apk add python3
RUN apk add py3-pip
WORKDIR /app
COPY requirements.txt .
RUN pip3 insntall requirements.txt
COPY app.py .
EXPOSE 80
CMD ["python3","app.py"]


FROM node:18
WORKKDIR /app
COPY package*.json ./
RUN npm install
COPY server.js .
EXPOSE 8080
CMD ["node","server.js"]


FROM alpine:3.18.2
RUN apk add openjdk11
WORKDIR /tomcat
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.90/bin/apache-tomcat-9.0.90.tar.gz .
RUN tar xf apache-tomcat-9.0.90.tar.gz && rm apache-tomcat-9.0.90.tar.gz
EXPOSE 8080
CMD [/tomcat/apache-tomcat-9.0.9/bin/catalina.sh]

Extract the contents of the apache-tomcat-9.0.91.tar.gz archive.
Remove the archive file after extraction to save space in the Docker image.
----------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
  labels:
    app: my-app
spec:
  replicas: 3  # Desired number of pods
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-container
        image: my-image
        ports:
        - containerPort: 80
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: my-deployment-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-deployment
  minReplicas: 2  # Minimum number of pods
  maxReplicas: 10  # Maximum number of pods
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50  # Target average CPU utilization
-----------------------------------------------------------------------

docker logs container_id
docker stats
docker exec -it container_id bash
docker inspect container_id
docker-compose up -d
docker network create --driver=bridge networkname
docker history image_id

docker image prune -f
docker system prune -f

docker ps 
docker ps -a
docker rm container_id
docker rm -f container_id
docker rm -f $(docker ps -aq)
docker ps --filter="status=exited" -q
docker ps -f="status=exited" -q
docker ps -f "status=exited" -q
docker rm -f $(docker ps --filter="status=exited" -q)

docker images
docker rmi imageid
docker rmi -f imageid
docker rmi -f $(docker images -q)
docker images --filter="dangling=true" -q
docker images -f="dangling=true" -q
docker images -f "dangling=true" -q
docker rmi -f $(docker images --filter="dangling=true" -q)

docker build -t manjukempaiah/<image_name>:<tag> .
docker run -d -p <host_port>:<container_port> --name container_name <image_name>:<tag>

docker run -it -e CONFIG_FILE="/app/prod.config" manjukempaiah/tomcat:0.0.1 
docker run -it --env-file ./manju.env manjukempaiah/tomcat:0.0.1
docker build -t manjukempaiah/tomcat:0.0.1 . --build-arg JAVA_PKG=openjdk11

-------------------------------------------------------------------------------------------------------------

eksctl create cluster --name=jhc-aug-dev
eksctl delete cluster --name=jhc-aug-dev 


kubectl create -f pods.yml
kubectl apply -f pods.yml
kubectl delete -f pods.yml

kubectl logs <pod_name>
kubectl logs <pod_name> -c conatiner_name
kubectl exec -it <pod_name> -- /bin/bash
kubectl get pods -o wide


kubectl describe pod <pod_name>
kubectl describe pod <pod_name> -c container_name
kubectl describe pod <pod_name> -n namespace | grep "Restart Count"


To find all pods across all namespaces that are not ready
kubectl get pods -A | grep "0/"

To find pods that are not ready
kubectl get pods | grep "0/"

To find all failed pods in the current namespace,
kubectl get pods --field-selector=status.phase=Failed

To find failed pods across all namespaces, add the -A flag:
kubectl get pods -A --field-selector=status.phase=Failed


kubectl rollout status deployment deployment_name -n namespace
kubectl rollout undo deployment deployment_name -n namespace
kubectl rollout restart deployment deployment_name -n namespace

kubectl rollout status deployment/your-deployment-name -n your-namespace
kubectl rollout history deployment/your-deployment-name -n your-namespace
kubectl rollout undo deployment/your-deployment-name -n your-namespace
kubectl describe deployment your-deployment-name -n your-namespace
kubectl rollout undo deployment/your-deployment-name -n your-namespace --to-revision=n

kubectl scale deployment <deployment_name> -n <namespace> --replicas=3

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl edit svc/argocd-server -n argocd
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d


----------------------------------------------------------------------------------------------

Nginx playbook

- hosts: 172.31.41.58
  become: True
  tasks:
    - name: configure nginx rpm
      yum: name=http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
    - name: install nginx
      yum:
        name: nginx
        state: present
    - name: copy nginx config file
      copy:
        src: nginx.conf
        dest: /etc/nginx/nginx.conf
      notify:
          - restart nginx
    - name: start and enable
      service:
        name: nginx
        state: started
        enabled: True
  handlers:
    - name: restart nginx
      service :
        name: nginx
        state: restarted

Copying the nginx.conf file from the current machine to the /etc/nginx/nginx.conf directory on the target machine ensures that the Nginx server on the target machine is configured according to the specifications defined in the nginx.conf file.        

--------------------------------------------------------------------------------------------------------------------

Can you please write ansible playbook conditionally install a package,if it is linux how to install package,if it is ubuntu how to install a package.

- hosts: 172.31.36.99
  become: True
  tasks:
    - name: install apache on linux
      yum:
        name: httpd
        state: present
      when: ansible_facts['os_family'] == "RedHat"
    - name: install apache on ubuntu
      apt:
        name: apache2
        state: present
      when: ansible_facts['os_family'] == "Debian"

--------------------------------------------------------------------------------------------------------------------

Docker install

- hosts: localhost
  become: True
  tasks:
    - name: install docker
      yum:
        name: docker
        state: present
    - name: Grant ec2-user permissions on docker
      command:
        cmd: "usermod -a -G docker ec2-user"
    - name: start docker
      service:
        name: docker
        state: started

--------------------------------------------------------------------------------------------------------------------

node.js install 

- name: Install Node.js
  hosts: your_target_hosts
  become: yes
  tasks:
    - name: Install Node.js
      apt:
        name: nodejs
        state: present
      when: ansible_distribution == 'Ubuntu'
    - name: Install Node.js on CentOS
      yum:
        name: nodejs
        state: present
      when: ansible_distribution == 'CentOS'
    - name: Install Node.js on Amazon Linux
      yum:
        name: nodejs
        state: present
      when: ansible_distribution == 'Amazon'

--------------------------------------------------------------------------------------------------------------------

Copy file from EC2 to target machine

- name: Copy file from EC2 to target machine
  hosts: target_machine
  become: yes
  tasks:
    - name: Copy file from EC2 to target machine
      copy:
        src: /path/to/source/file/on/ec2
        dest: /path/to/destination/folder/on/target_machine


--------------------------------------------------------------------------------------------------------------------

pods.yml

apiVersion: v1
kind: Pod
metadata:
  name: myapp
  labels:
    name: myapp
spec:
  containers:
    - name: myapp
      image: nginx
      resources:
        requests:
          memory: "128Mi"
          cpu: "250m"
        limits:
          memory: "256Mi"
          cpu: "500m"
      ports:
        - containerPort: 80

resources: Defines the resource requirements and limits for the container.

requests: Specifies the minimum amount of resources the container needs.

limits: Sets upper limits on the resources the container can consume.

--------------------------------------------------------------------------------------------------------------------

nginxsvc.yml

apiVersion: v1
kind: Service
metadata:
  name: myapp
spec:
  selector:
    name: myapp
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30000
  type: LoadBalancer

port: 80: Defines that the Service should listen on port 80.

targetPort: 80: Specifies that the traffic should be forwarded to Pods on port 80.

nodePort: 30000: Opens a specific port on all nodes in the cluster, allowing external traffic to reach the Service.

--------------------------------------------------------------------------------------------------------------------

ReplicaSet

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    matchExpressions:
      - {key: app, operator: In, values: [nginx]}
  template:
    metadata:
      name: nodeapp
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

--------------------------------------------------------------------------------------------------------------------

Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp
        image: kammana/nodeapp:v1
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
        ports:
        - containerPort: 8080

--------------------------------------------------------------------------------------------------------------------

 Rolling Updates

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodeapp
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: nodeapp
  template:
    metadata:
      labels:
        app: nodeapp
    spec:
      containers:
      - image: kammana/nodeapp:v2
        name: nodeapp
        ports:
        - containerPort: 8080

maxSurge: Represents the maximum number or percentage of Pods that can be created above the desired number of replicas during an update. Here, it is set to 25%.
maxUnavailable: Represents the maximum number or percentage of Pods that can be unavailable (not running) during an update. Here, it is set to 25%.

--------------------------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodeapp
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: nodeapp
  template:
    metadata:
      labels:
        app: nodeapp
    spec:
      containers:
      - image: kammana/nodeapp:v2
        name: nodeapp
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: data-volume
          mountPath: /app/data   # Mount the volume to this path
  volumes:
  - name: data-volume
    persistentVolumeClaim:
      claimName: my-pvc   # Name of the PersistentVolumeClaim

--------------------------------------------------------------------------------------------------------------------
Core API Group (v1)
Extended API Group (apps/v1)

v1: Used for core, stable, and essential resources like Pods, Services, ConfigMaps, etc., which are part of Kubernetes' fundamental operations.

apps/v1: Used for more complex, application-related resources like Deployments, StatefulSets, and DaemonSets, which are managed separately to allow for greater flexibility and evolution.


-------------------------------------------------------------------------------------------------------------------
Recursively

-r: Primarily used in commands like rm and cp for recursive operations, and it usually has the same meaning as -R.
-R: Also used for recursive operations but is more commonly used in commands like chmod and chown for recursively changing permissions or ownership.

--------------------------------------------------------------------------------------------------------------------------



